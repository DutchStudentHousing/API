/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Property;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-12T10:17:15.320226972+02:00[Europe/Amsterdam]")
@Validated
@Tag(name = "property", description = "Property listings and management")
public interface PropertiesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /properties : Get properties with optional filters
     * Get properties with optional filters
     *
     * @param city City where the property is (optional)
     * @param lat Latitude (optional)
     * @param _long Longitude (optional)
     * @param distance Distance in kilometers from known point (optional)
     * @param perPage Items per page (optional)
     * @param page Page number (allows computed range on server side along with perPage parameter) (optional)
     * @param orderBy Value to order listed items by (optional, default to price)
     * @param min Minimum price (optional)
     * @param max Maximum price (optional)
     * @return Successful operation (status code 200)
     *         or Invalid paramters (status code 400)
     *         or No properties found for given parameters (status code 404)
     *         or Unauthorized to view properties (not yet logged in?) (status code 401)
     */
    @Operation(
        operationId = "getProperties",
        summary = "Get properties with optional filters",
        description = "Get properties with optional filters",
        tags = { "property" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Property.class))),
                @Content(mediaType = "text/csv", array = @ArraySchema(schema = @Schema(implementation = Property.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid paramters"),
            @ApiResponse(responseCode = "404", description = "No properties found for given parameters"),
            @ApiResponse(responseCode = "401", description = "Unauthorized to view properties (not yet logged in?)")
        },
        security = {
            @SecurityRequirement(name = "dsh_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/properties",
        produces = { "application/json", "text/csv" }
    )
    default ResponseEntity<List<Property>> getProperties(
        @Parameter(name = "city", description = "City where the property is", in = ParameterIn.QUERY) @Valid @RequestParam(value = "city", required = false) String city,
        @Parameter(name = "lat", description = "Latitude", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lat", required = false) Float lat,
        @Parameter(name = "long", description = "Longitude", in = ParameterIn.QUERY) @Valid @RequestParam(value = "long", required = false) Float _long,
        @Parameter(name = "distance", description = "Distance in kilometers from known point", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distance", required = false) Float distance,
        @Parameter(name = "perPage", description = "Items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "perPage", required = false) Integer perPage,
        @Parameter(name = "page", description = "Page number (allows computed range on server side along with perPage parameter)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "orderBy", description = "Value to order listed items by", in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderBy", required = false, defaultValue = "price") String orderBy,
        @Parameter(name = "min", description = "Minimum price", in = ParameterIn.QUERY) @Valid @RequestParam(value = "min", required = false) Float min,
        @Parameter(name = "max", description = "Maximum price", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max", required = false) Float max
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"img\" : \"img\", \"city\" : \"city\", \"date_published\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"id\" : \"id\", \"rent\" : 1.4658129, \"postal_code\" : \"postal_code\", \"type\" : \"Room\", \"lat\" : 0.8008282, \"long\" : 6.0274563, \"sqm\" : 5, \"rent_incl\" : true }, { \"img\" : \"img\", \"city\" : \"city\", \"date_published\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"id\" : \"id\", \"rent\" : 1.4658129, \"postal_code\" : \"postal_code\", \"type\" : \"Room\", \"lat\" : 0.8008282, \"long\" : 6.0274563, \"sqm\" : 5, \"rent_incl\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
