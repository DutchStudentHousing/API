/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Account;
import org.openapitools.model.Login200Response;
import org.openapitools.model.LoginRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-12T10:17:15.320226972+02:00[Europe/Amsterdam]")
@Validated
@Tag(name = "account", description = "the account API")
public interface AccountApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /account : Create a new account
     *
     * @param account Create a new account (optional)
     * @return Successfully created a new account (status code 201)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "addAccount",
        summary = "Create a new account",
        tags = { "account" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Successfully created a new account", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Account.class)),
                @Content(mediaType = "text/csv", schema = @Schema(implementation = Account.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "dsh_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/account",
        produces = { "application/json", "text/csv" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Account> addAccount(
        @Parameter(name = "Account", description = "Create a new account") @Valid @RequestBody(required = false) Account account
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 0, \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/csv"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/csv";
                    ApiUtil.setExampleResponse(request, "text/csv", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /account/login : Log in to account
     *
     * @param loginRequest Log in to account (optional)
     * @return Successfully logged in (status code 200)
     *         or Account with email not found (status code 404)
     *         or Incorrect password (status code 400)
     */
    @Operation(
        operationId = "login",
        summary = "Log in to account",
        tags = { "account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully logged in", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Login200Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "Account with email not found"),
            @ApiResponse(responseCode = "400", description = "Incorrect password")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/account/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Login200Response> login(
        @Parameter(name = "LoginRequest", description = "Log in to account") @Valid @RequestBody(required = false) LoginRequest loginRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /account/logout : Log out of account
     *
     * @return Successfully logged out (status code 204)
     *         or Not logged in (status code 403)
     */
    @Operation(
        operationId = "logout",
        summary = "Log out of account",
        tags = { "account" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successfully logged out"),
            @ApiResponse(responseCode = "403", description = "Not logged in")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/account/logout"
    )
    default ResponseEntity<Void> logout(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
