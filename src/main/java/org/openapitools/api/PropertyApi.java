/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Property;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-12T10:17:15.320226972+02:00[Europe/Amsterdam]")
@Validated
@Tag(name = "property", description = "Property listings and management")
public interface PropertyApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /property : Add a new property listing
     * Add a new property listing
     *
     * @param property Create a new property listing (required)
     * @return Successful operation (status code 201)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "addProperty",
        summary = "Add a new property listing",
        description = "Add a new property listing",
        tags = { "property" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Property.class)),
                @Content(mediaType = "text/csv", schema = @Schema(implementation = Property.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "dsh_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/property",
        produces = { "application/json", "text/csv" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Property> addProperty(
        @Parameter(name = "Property", description = "Create a new property listing", required = true) @Valid @RequestBody Property property
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"img\" : \"img\", \"city\" : \"city\", \"date_published\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"id\" : \"id\", \"rent\" : 1.4658129, \"postal_code\" : \"postal_code\", \"type\" : \"Room\", \"lat\" : 0.8008282, \"long\" : 6.0274563, \"sqm\" : 5, \"rent_incl\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/csv"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/csv";
                    ApiUtil.setExampleResponse(request, "text/csv", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /property : Update an existing property
     * Update an existing property by Id
     *
     * @param property Update an existent property listing (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Property not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
        operationId = "updateProperty",
        summary = "Update an existing property",
        description = "Update an existing property by Id",
        tags = { "property" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Property.class)),
                @Content(mediaType = "text/csv", schema = @Schema(implementation = Property.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Property not found"),
            @ApiResponse(responseCode = "405", description = "Validation exception")
        },
        security = {
            @SecurityRequirement(name = "dsh_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/property",
        produces = { "application/json", "text/csv" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Property> updateProperty(
        @Parameter(name = "Property", description = "Update an existent property listing", required = true) @Valid @RequestBody Property property
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"img\" : \"img\", \"city\" : \"city\", \"date_published\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"id\" : \"id\", \"rent\" : 1.4658129, \"postal_code\" : \"postal_code\", \"type\" : \"Room\", \"lat\" : 0.8008282, \"long\" : 6.0274563, \"sqm\" : 5, \"rent_incl\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/csv"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/csv";
                    ApiUtil.setExampleResponse(request, "text/csv", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
